// –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –º–æ–¥—É–ª–∏ –∏ —Å—Ç–∏–ª–∏
import React, { useState, useEffect } from "react"; // –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º React –∏ —Ö—É–∫–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å —Å–æ—Å—Ç–æ—è–Ω–∏–µ–º –∏ —ç—Ñ—Ñ–µ–∫—Ç–∞–º–∏
import "./WordPuzzleGame.css"; // –ü–æ–¥–∫–ª—é—á–∞–µ–º CSS –¥–ª—è —Å—Ç–∏–ª–∏–∑–∞—Ü–∏–∏ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞
import { useParams } from "react-router-dom"; // –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º useParams –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø–∞—Ä–∞–º–µ—Ç—Ä–∞ lesson –∏–∑ URL
import CONFIG from "../config"; // –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –æ–±—ä–µ–∫—Ç –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ —Å API URL

// –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–π –∫–æ–º–ø–æ–Ω–µ–Ω—Ç WordPuzzleGame
const WordPuzzleGame = () => {
  // –ò–∑–≤–ª–µ–∫–∞–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä lesson –∏–∑ URL
  const { lesson } = useParams();

  // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏—è
  const [word, setWord] = useState(""); // –•—Ä–∞–Ω–∏—Ç —Ç–µ–∫—É—â–µ–µ —Å–ª–æ–≤–æ –¥–ª—è —Å–±–æ—Ä–∫–∏
  const [translation, setTranslation] = useState(""); // –•—Ä–∞–Ω–∏—Ç –ø–µ—Ä–µ–≤–æ–¥ —Ç–µ–∫—É—â–µ–≥–æ —Å–ª–æ–≤–∞
  const [shuffledLetters, setShuffledLetters] = useState([]); // –•—Ä–∞–Ω–∏—Ç –ø–µ—Ä–µ–º–µ—à–∞–Ω–Ω—ã–µ –±—É–∫–≤—ã —Å–ª–æ–≤–∞
  const [assembledWord, setAssembledWord] = useState([]); // –•—Ä–∞–Ω–∏—Ç –±—É–∫–≤—ã, –∫–æ—Ç–æ—Ä—ã–µ –≤—ã–±—Ä–∞–ª –∏–≥—Ä–æ–∫
  const [audio, setAudio] = useState(""); // –•—Ä–∞–Ω–∏—Ç URL –∞—É–¥–∏–æ—Ñ–∞–π–ª–∞ —Å –ø—Ä–æ–∏–∑–Ω–æ—à–µ–Ω–∏–µ–º —Å–ª–æ–≤–∞
  const [error, setError] = useState(null); // –•—Ä–∞–Ω–∏—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ, –µ—Å–ª–∏ —á—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫

  const [wordList, setWordList] = useState([]); // –°–ø–∏—Å–æ–∫ –≤—Å–µ—Ö —Å–ª–æ–≤ –≤ —É—Ä–æ–∫–µ
  const [completedWords, setCompletedWords] = useState(0); // –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–≤–µ—Ä—à—ë–Ω–Ω—ã—Ö —Å–ª–æ–≤
  const [hasPlayedAudio, setHasPlayedAudio] = useState(false); // –§–ª–∞–≥, –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–∞—é—â–∏–π –ø–æ–≤—Ç–æ—Ä–Ω–æ–µ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ –∞—É–¥–∏–æ

  // useEffect –≤—ã–∑—ã–≤–∞–µ—Ç—Å—è –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞ lesson
  useEffect(() => {
    // –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ —Å–ª–æ–≤ –∏–∑ API
    const fetchWords = async () => {
      try {
        // –í—ã–ø–æ–ª–Ω—è–µ–º GET-–∑–∞–ø—Ä–æ—Å –∫ API, –ø–æ–ª—É—á–∞—è —Å–ª–æ–≤–∞ –¥–ª—è —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ —É—Ä–æ–∫–∞
        const response = await fetch(
          `${CONFIG.API_URL}/api/words?lesson=${lesson}`
        );

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —É—Å–ø–µ—à–µ–Ω –ª–∏ –∑–∞–ø—Ä–æ—Å
        if (!response.ok) {
          throw new Error(`HTTP error! Status: ${response.status}`);
        }

        // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –æ—Ç–≤–µ—Ç –≤ JSON
        const data = await response.json();
        console.log("–ó–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–µ —Å–ª–æ–≤–∞ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö:", data); // –õ–æ–≥–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏

        setWordList(data); // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–µ —Å–ª–æ–≤–∞ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ

        if (data.length > 0) {
          initializeGame(data[0]); // –ó–∞–ø—É—Å–∫–∞–µ–º –∏–≥—Ä—É —Å –ø–µ—Ä–≤—ã–º —Å–ª–æ–≤–æ–º
        } else {
          setError("–°–ø–∏—Å–æ–∫ —Å–ª–æ–≤ –ø—É—Å—Ç. –î–æ–±–∞–≤—å—Ç–µ —Å–ª–æ–≤–∞ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö."); // –í—ã–≤–æ–¥–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ, –µ—Å–ª–∏ —Å–ª–æ–≤ –Ω–µ—Ç
        }
      } catch (err) {
        console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å–ª–æ–≤:", err);
        setError("–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Å–ª–æ–≤–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.");
      }
    };

    fetchWords(); // –í—ã–∑—ã–≤–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é –∑–∞–≥—Ä—É–∑–∫–∏ —Å–ª–æ–≤ –ø—Ä–∏ –º–æ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞
  }, [lesson]); // –ó–∞–ø—É—Å–∫–∞–µ–º —ç—Ñ—Ñ–µ–∫—Ç –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ lesson

  // –§—É–Ω–∫—Ü–∏—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –∏–≥—Ä—ã —Å –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–º —Å–ª–æ–≤–æ–º
  const initializeGame = (card) => {
    console.log("–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∏–≥—Ä—ã –¥–ª—è —Å–ª–æ–≤–∞:", card); // –õ–æ–≥–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏

    setWord(card.word); // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –Ω–æ–≤–æ–µ —Å–ª–æ–≤–æ
    setTranslation(card.translation); // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø–µ—Ä–µ–≤–æ–¥ —Å–ª–æ–≤–∞
    setAudio(card.audio || ""); // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º URL –∞—É–¥–∏–æ—Ñ–∞–π–ª–∞ (–µ—Å–ª–∏ –µ—Å—Ç—å)

    // –†–∞–∑–±–∏–≤–∞–µ–º —Å–ª–æ–≤–æ –Ω–∞ –±—É–∫–≤—ã –∏ –ø–µ—Ä–µ–º–µ—à–∏–≤–∞–µ–º –∏—Ö —Å–ª—É—á–∞–π–Ω—ã–º –æ–±—Ä–∞–∑–æ–º
    setShuffledLetters(card.word.split("").sort(() => Math.random() - 0.5));
    setAssembledWord([]); // –û—á–∏—â–∞–µ–º —Å–æ–±—Ä–∞–Ω–Ω–æ–µ —Å–ª–æ–≤–æ
    setHasPlayedAudio(false); // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Ñ–ª–∞–≥ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è –∞—É–¥–∏–æ
  };

  // –§—É–Ω–∫—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ –±—É–∫–≤—É
  const handleLetterClick = (letter, index) => {
    setAssembledWord([...assembledWord, letter]); // –î–æ–±–∞–≤–ª—è–µ–º –±—É–∫–≤—É –≤ —Å–æ–±—Ä–∞–Ω–Ω–æ–µ —Å–ª–æ–≤–æ
    setShuffledLetters(shuffledLetters.filter((_, i) => i !== index)); // –£–¥–∞–ª—è–µ–º –±—É–∫–≤—É –∏–∑ —Å–ø–∏—Å–∫–∞ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö
  };

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–±—Ä–æ—Å–∞ —Ç–µ–∫—É—â–µ–≥–æ —Å–ª–æ–≤–∞
  const handleReset = () => {
    setAssembledWord([]); // –û—á–∏—â–∞–µ–º —Å–æ–±—Ä–∞–Ω–Ω–æ–µ —Å–ª–æ–≤–æ
    setShuffledLetters(word.split("").sort(() => Math.random() - 0.5)); // –ü–µ—Ä–µ–º–µ—à–∏–≤–∞–µ–º –±—É–∫–≤—ã –∑–∞–Ω–æ–≤–æ
  };

  // –§—É–Ω–∫—Ü–∏—è –ø–µ—Ä–µ—Ö–æ–¥–∞ –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —Å–ª–æ–≤—É
  const nextWord = () => {
    if (wordList.length > 1) {
      // –£–±–∏—Ä–∞–µ–º —Ç–µ–∫—É—â–µ–µ —Å–ª–æ–≤–æ –∏–∑ wordList
      const remainingWords = wordList.slice(1);
      console.log("–û—Å—Ç–∞–≤—à–∏–µ—Å—è —Å–ª–æ–≤–∞:", remainingWords); // –õ–æ–≥–∏—Ä—É–µ–º –æ—Å—Ç–∞–≤—à–∏–µ—Å—è —Å–ª–æ–≤–∞

      setWordList(remainingWords); // –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ —Å–ª–æ–≤
      setCompletedWords(completedWords + 1); // –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Å—á—ë—Ç—á–∏–∫ –∑–∞–≤–µ—Ä—à—ë–Ω–Ω—ã—Ö —Å–ª–æ–≤
      initializeGame(remainingWords[0]); // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–ª–µ–¥—É—é—â–µ–µ —Å–ª–æ–≤–æ
    } else {
      setError("–í—ã —Ä–µ—à–∏–ª–∏ –≤—Å–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ —Å–ª–æ–≤–∞! –ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º!"); // –ó–∞–≤–µ—Ä—à–∞–µ–º –∏–≥—Ä—É, –µ—Å–ª–∏ –≤—Å–µ —Å–ª–æ–≤–∞ —Ä–µ—à–µ–Ω—ã
    }
  };

  // –§—É–Ω–∫—Ü–∏—è –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è –∞—É–¥–∏–æ
  const playAudio = (audioUrl) => {
    if (audioUrl) {
      const audio = new Audio(audioUrl);
      audio
        .play()
        .catch((err) => console.error("–û—à–∏–±–∫–∞ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è –∞—É–¥–∏–æ:", err));
    }
  };

  // useEffect –¥–ª—è –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è –∞—É–¥–∏–æ –ø—Ä–∏ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π —Å–±–æ—Ä–∫–µ —Å–ª–æ–≤–∞
  useEffect(() => {
    if (assembledWord.join("") === word && !hasPlayedAudio) {
      const audioUrl = `${
        CONFIG.API_URL
      }/api/proxy-audio?url=${encodeURIComponent(audio)}`;
      playAudio(audioUrl);
      setHasPlayedAudio(true);
    }
  }, [assembledWord, word, hasPlayedAudio, audio]);

  return (
    <div className="word-puzzle-game">
      <h1>–°–æ–±–µ—Ä–∏ —Å–ª–æ–≤–æ</h1>
      {error ? (
        <p className="error">{error}</p>
      ) : (
        <>
          {/* –ü—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä */}
          <div className="progress-bar-container">
            <label>–ü—Ä–æ–≥—Ä–µ—Å—Å:</label>
            <div className="progress-bar">
              <div
                className="progress-bar-fill"
                style={{
                  width: `${
                    (completedWords / (completedWords + wordList.length)) * 100
                  }%`,
                }}
              >
                {completedWords}/{completedWords + wordList.length}
              </div>
            </div>
          </div>

          <p>
            –ü–µ—Ä–µ–≤–æ–¥: <strong>{translation}</strong>
          </p>

          {/* –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å–æ–±—Ä–∞–Ω–Ω–æ–≥–æ —Å–ª–æ–≤–∞ */}
          <div className="assembled-word">
            {assembledWord.map((letter, index) => (
              <span key={index} className="letter">
                {letter}
              </span>
            ))}
          </div>

          {/* –ë—É–∫–≤—ã –¥–ª—è —Å–æ—Å—Ç–∞–≤–ª–µ–Ω–∏—è —Å–ª–æ–≤–∞ */}
          <div className="container">
            <div className="shuffled-letters">
              {shuffledLetters.map((letter, index) => (
                <button
                  key={index}
                  className="letter-button"
                  onClick={() => handleLetterClick(letter, index)}
                >
                  {letter}
                </button>
              ))}
            </div>
          </div>

          {/* –ö–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è */}
          <div className="controls">
            <button className="reset-button" onClick={handleReset}>
              –°–±—Ä–æ—Å–∏—Ç—å
            </button>
            {/* <button className="reset-button" onClick={() => playAudio(audio)}>
              –û–∑–≤—É—á–∏—Ç—å —Å–ª–æ–≤–æ
            </button> */}
          </div>

          {/* –°–æ–æ–±—â–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—Ö–µ */}
          {assembledWord.join("") === word && (
            <div className="success-message">
              <h2>–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –í—ã —Å–æ–±—Ä–∞–ª–∏ —Å–ª–æ–≤–æ: {word} üéâ</h2>
              <button className="next-button" onClick={nextWord}>
                –°–ª–µ–¥—É—é—â–µ–µ —Å–ª–æ–≤–æ
              </button>
            </div>
          )}
        </>
      )}
    </div>
  );
};

export default WordPuzzleGame;

